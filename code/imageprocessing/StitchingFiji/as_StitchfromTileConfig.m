function [Panorama, fname,ColPos,RowPos ]= as_StitchfromTileConfig(fname,index,reducefactor,renamefun)
% Panorama = as_StitchfromTileConfig
% reads TileConfiguration.registered.txt, generated by FIJI Grid stitch,
% and stitch images to create matrix Panorama
%
% renamefun  =@(x) ['myelin_segmentation_' x];
% as_StitchfromTileConfig([],renamefun)
%
% display Panorama using:
% AS_DISPLAY_LARGEIMAGE(Panorama);

if ~exist('fname','var') || isempty(fname), fname='TileConfiguration.registered.txt'; end
if ~exist('reducefactor','var') || isempty(reducefactor), reducefactor=1; end

[fname,ColPos,RowPos] = as_stitch_LoadTileConfiguration(fname);
if exist('renamefun','var')
    fname = cellfun(renamefun,fname,'UniformOutput',false);
end
if exist('index','var') && ~isempty(index)
    [fname,I]=sort_nat(fname);
    ColPos = ColPos(I);
    RowPos = RowPos(I);
    
    fname = fname(index);
    ColPos = ColPos(index);
    RowPos = RowPos(index);
end

Msize = size(imread(fname{1}));
RowPosmod = round(RowPos-min(RowPos));
ColPosmod = round(ColPos-min(ColPos));

[maxRowPos,MRind]=max(RowPosmod); MsizeRow = size(imread(fname{MRind}),1);
[maxColPos,MRind]=max(ColPosmod); MsizeColPos = size(imread(fname{MRind}),2);
img = zeros(ceil(round(maxRowPos+MsizeRow+1)/reducefactor),ceil(round(maxColPos+MsizeColPos+1)/reducefactor),'uint8');

rest_row = mod(RowPosmod,reducefactor);
rest_col = mod(ColPosmod,reducefactor);
for ff = 1:length(fname)
    tmp = imread(fname{ff}); dim=size(tmp); if size(tmp,3)==3, tmp = rgb2gray(tmp); end
    tmp = tmp((1+rest_row(ff)):reducefactor:end,(1+rest_col(ff)):reducefactor:end);
    img(ceil((RowPosmod(ff)+1)/reducefactor):(ceil((RowPosmod(ff)+1)/reducefactor)+size(tmp,1)-1),ceil((ColPosmod(ff)+1)/reducefactor):(ceil((ColPosmod(ff)+1)/reducefactor)+size(tmp,2)-1))=im2uint8(tmp);
end

%as_display_LargeImage(img);
end

